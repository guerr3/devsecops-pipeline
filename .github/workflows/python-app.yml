name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "0 0 * * 0" # Wekelijkse scan op zondag

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest bandit safety detect-secrets
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest

      - name: Run SAST scan with Bandit
        run: |
          bandit -r . -f json -o bandit-results.json || true
          if grep -q '"SEVERITY": "HIGH"' bandit-results.json; then
            echo "::error::High severity security issues found in code"
            exit 1
          fi

      - name: Check dependencies with Safety
        run: |
          safety check || true
          if [ $? -ne 0 ]; then
            echo "::error::Vulnerable dependencies found"
            exit 1
          fi

      - name: Scan for secrets
        run: |
          detect-secrets scan > secrets-results.json
          if [ -s secrets-results.json ] && [ "$(cat secrets-results.json)" != "{}" ]; then
            echo "::error::Potential secrets found in code"
            cat secrets-results.json
            exit 1
          fi

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            secrets-results.json

  security-gate:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "::error::Security checks failed - Pull request cannot be merged"
            exit 1
          fi
